/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable react/prop-types */
import { useEffect, useRef } from "react";
import style from "./Imganimation.module.css";

const Imganimation = ({ text, speed ,singleline }) => {
  const ascii = useRef();
  const asciiText =
    text ||
    `
..........................................,,,,:;+****+;::,,,....................................
.......................................,;+**???%%%%%%%????**+:,,...............................
...................................:;;+?%%%%%%%%%%%%%%%%%%%%%%??+:,............................
.................................,+?%SSS%%%%%%%%%%%%%%%SSSSSSSSSSS?*;,.........................
................................:*%%SSSSS%%%%%%%%%%SSSSSSSSSSSSSSSSSS?;........................
.............................,:*?%SSSSSSS%S%%%%%SSSSSSSSSSSS#S#SSSSSSSS+,......................
............................:*%S%SSSSSSSS%%%%SSSSSSSSSSSSSSS############%*:....................
..........................,:*%%SSSSSSSSSSSS%%S%%%%SSSSS###################S+,..................
.........................,:*%SSSSSSSSSSSSS%%%%%%%%S%%SSSS###################;..................
.........................,;?SSSSSSSS%???????*****????%%%SSS#################%:.................
.........................:?SSSSS%%%%?****+++;;;;++++****?%%SS################*.................
.........................+%SSSSS%???**++;;;;;;;;;;;+++++***?%%S######@@@@@@@#?,................
.........................:%S%%%???**+++;;;;;;;;;;;;;;;++++++++**?%SSS#@@@@@@#%,.................
.........................,*%%???*+++;;;;;;;;;;;;;;;;;;;;;;++++++***??%##@@@##?,.............
.........................,+???*+;;;;;;;;;;;;;;;;;;;;;;;;;;+++++*****??%##@###+................
.........................,;??*;;+++++++;;;;;;;;;;;;;;;;;;;;++++******??%####S;................
..........................:*?+;++;;;++;;+++++;;::;;;;;;;;;;;;;+++*****??S###%,.................
......................,::::+?+;;;;;;;;;;;+++*++;;;;;;;;;;;++++****?*****%###*,..................
.....................,:;;;;+*;;;;;;++*++++***+++;;;;;;;++*??***********?%SS%:....................
.....................:;;;:;;+;;;;;;+**++%?%*++++;;;;;+*****************?SSS+,....................
.....................:;;;:;;;;;;;;;;;+;;+*+;+++++;;;+*?**++%?S%?%%?****?SS%;,....................
.....................:;;:;+;;;;;;;;;;;;;;;+++++++;;;+****+;*%?++??*****?S?**+,...................
.....................,;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+****+++++******+**??***+;,..................
......................:;;+;;;+;;;;;;;;;;;;;;;;;;;;;;+***++++++++++++***?**+++;,..................
......................,:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+**++++++++++++***?*++*;:...................
.......................,:;;;;;;;;;;;;;;;;;;;;;;;;;;;;+**+++++++++++**?***++;,....................
........................,,::,;;;;;;;;;;;;;;;;;;;+;;;+++++++;;;;+++***???**+,.....................
.............................,;;;;;;;;;;;;;;;;;+;+++**+++++++++++***?****+:......................
..............................:;;;;;;;;;;+++++++++++***+++++++++****+++++:,......................
..............................,;;;;;;;;;+**++++++++****?*+++++*****;,,..........................
..............................,;++;;;;;;;;;;++++++++****++++***?*:,,,...........................
..............................,;;++++;;;;;;;;;;++++++++*+*****?*:..,,...........................
..............................,;;;;+++;;;;;;;;;;;;;;+++****???;,................................
...........................:;*+;;;;;;++++;;;;;;;;;;++++***???;,,,..............................
........................,;?S#*;;;;;;;;;++++++;;;;;+++********,,,...............................
.......................:?SSS+,;;;;;;;;;;;;+++++++++*********;,,,..............................
....................,,+SSSS+,,++;;;;;;;;;;;;;;;+++++****++**:,,,..............................
...............,,,,:;;SSSS%:,,+*;;;;;;;;;;;;;;;;;+++**+++***:,,..............................
.........,,,,::;;;;;;*SSSS?:,,;*+;;;;;;;;;;;;;;+++++++++++*++*,.............................
..,,,,::::;;;;;;;;;;;?SSSS*,,,:*+;;;;;;;;;;;;;;;+++++++++*?:?@;.............................
:::;;;;;;;;;;;;;;;;;;%SSSS;,,,,+*+;;;;;;;;;;;;;;;;++;;+++*;:%@S,.,.........................
;;;;;;;;;;;;;;;;;;;:;%SSS%;,,,,:*++;;;;;;;;;;;;;;;;;;;++*::;S@@?,.........................
;;;;;;:::::;;;;;;;::;%S%S%;,,,,:;*++;;;;;;;;;;;;;;;;;+++:::;#@@#+;,,......................
::::;;;::::;;;;;;:::+S%%S%:,,,,,:+*++;;;;;;;;;;;;;;;++;::::+@@@#+**;:,....................
:::::::::::;:;;;;:::+S%SS?:,,:::::+++;;;;;;;;;;;;++++;,::::?@@@#++*+++:,..................
:::::::::::::;::::::+S%%S*,::::::,:;+++;;;;;;;++++:,:::::S#@@#++++++++;,................
:::::::::::::;::::::*%%%%:;::,,,,,,,,,:++++;;;::::::::::::*##@@S++++++++++:,..............
:::::::::::::;::::::+%%%%,;::,,,,,,,,,,,,++++;:::+*,::::::;##@@S+++++;++++++;,............       

`;
  const symbol = ".,:;*%S+?#@";
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

  useEffect(() => {
    let isRunning = false;

  
    const runEffectAnimation = () => {
      if (isRunning) {
        return;
      }

      let iteration = 0;
      isRunning = true;
      const originalText = asciiText;

      const lines = originalText.split("\n");
      const change = setInterval(() => {
        if (!text) {
          ascii.current.innerHTML = lines
            .map((line) =>
              line
                .split("")
                .map((letter, index) => {
                  if (index < iteration) {
                    return line[index];
                  }
                  return symbol[Math.floor(Math.random() * 11)];
                })
                .join("")
            )
            .join("<br>");

          if (iteration >= lines[1].length + 10) {
            isRunning = false;
            clearInterval(change);
          }
        iteration += 1;
        } else {
          ascii.current.innerHTML = originalText
            .split("")
            .map((letter, index) => {
              if (index < iteration) {
                return originalText[index];
              }
              return alphabet[Math.floor(Math.random() * 26)];
            })
            .join("");

          if (iteration >= originalText.length) {
            isRunning = false;
            clearInterval(change);
          }
        iteration += 1/4;

        }
      }, speed);
    };

    runEffectAnimation();

    // Cleanup function to clear the interval when the component is unmounted
    return () => {
      clearInterval();
    }
  }, [speed, text]);
  return (
    <>
      <span
        ref={ascii}
        className={ singleline ? style.singleline : style.asciiimg}
        dangerouslySetInnerHTML={{ __html: "" }}
      ></span>
    </>
  );
};

export default Imganimation;
